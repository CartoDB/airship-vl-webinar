(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["AsBridge"] = factory();
	else
		root["AsBridge"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../node_modules/mitt/dist/mitt.es.js":
/*!***********************************************************************!*\
  !*** /home/roman/git/carto/airship/node_modules/mitt/dist/mitt.es.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n//      \n// An event handler can take an optional event argument\n// and should not return a value\n                                          \n                                                               \n\n// An array of all currently registered event handlers for a type\n                                            \n                                                            \n// A map of event types and their corresponding event handlers.\n                        \n                                 \n                                   \n  \n\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nfunction mitt(all                 ) {\n\tall = all || Object.create(null);\n\n\treturn {\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to listen for, or `\"*\"` for all events\n\t\t * @param  {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton: function on(type        , handler              ) {\n\t\t\t(all[type] || (all[type] = [])).push(handler);\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to unregister `handler` from, or `\"*\"`\n\t\t * @param  {Function} handler Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff: function off(type        , handler              ) {\n\t\t\tif (all[type]) {\n\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `\"*\"` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * @param {String} type  The event type to invoke\n\t\t * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit: function emit(type        , evt     ) {\n\t\t\t(all[type] || []).slice().map(function (handler) { handler(evt); });\n\t\t\t(all['*'] || []).slice().map(function (handler) { handler(type, evt); });\n\t\t}\n\t};\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (mitt);\n//# sourceMappingURL=mitt.es.js.map\n\n\n//# sourceURL=webpack://AsBridge//home/roman/git/carto/airship/node_modules/mitt/dist/mitt.es.js?");

/***/ }),

/***/ "../../node_modules/node-libs-browser/node_modules/process/browser.js":
/*!****************************************************************************************************!*\
  !*** /home/roman/git/carto/airship/node_modules/node-libs-browser/node_modules/process/browser.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://AsBridge//home/roman/git/carto/airship/node_modules/node-libs-browser/node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/semver/semver.js":
/*!***************************************!*\
  !*** ./node_modules/semver/semver.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = SemVer;\n\n// The debug function is excluded entirely from the minified version.\n/* nomin */ var debug;\n/* nomin */ if (typeof process === 'object' &&\n    /* nomin */ process.env &&\n    /* nomin */ process.env.NODE_DEBUG &&\n    /* nomin */ /\\bsemver\\b/i.test(process.env.NODE_DEBUG))\n  /* nomin */ debug = function() {\n    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);\n    /* nomin */ args.unshift('SEMVER');\n    /* nomin */ console.log.apply(console, args);\n    /* nomin */ };\n/* nomin */ else\n  /* nomin */ debug = function() {};\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0';\n\nvar MAX_LENGTH = 256;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\n// Max safe segment length for coercion.\nvar MAX_SAFE_COMPONENT_LENGTH = 16;\n\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar R = 0;\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++;\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\nvar NUMERICIDENTIFIERLOOSE = R++;\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\n\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++;\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\n\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++;\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')';\n\nvar MAINVERSIONLOOSE = R++;\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++;\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';\n\nvar PRERELEASEIDENTIFIERLOOSE = R++;\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';\n\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++;\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\n\nvar PRERELEASELOOSE = R++;\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++;\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++;\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\n\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++;\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?';\n\nsrc[FULL] = '^' + FULLPLAIN + '$';\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?';\n\nvar LOOSE = R++;\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';\n\nvar GTLT = R++;\nsrc[GTLT] = '((?:<|>)?=?)';\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++;\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\nvar XRANGEIDENTIFIER = R++;\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\n\nvar XRANGEPLAIN = R++;\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?';\n\nvar XRANGEPLAINLOOSE = R++;\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?';\n\nvar XRANGE = R++;\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\nvar XRANGELOOSE = R++;\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\nvar COERCE = R++;\nsrc[COERCE] = '(?:^|[^\\\\d])' +\n              '(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:$|[^\\\\d])';\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++;\nsrc[LONETILDE] = '(?:~>?)';\n\nvar TILDETRIM = R++;\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\nvar tildeTrimReplace = '$1~';\n\nvar TILDE = R++;\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\nvar TILDELOOSE = R++;\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++;\nsrc[LONECARET] = '(?:\\\\^)';\n\nvar CARETTRIM = R++;\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\nvar caretTrimReplace = '$1^';\n\nvar CARET = R++;\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\nvar CARETLOOSE = R++;\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++;\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\nvar COMPARATOR = R++;\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\n\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++;\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\nvar comparatorTrimReplace = '$1$2$3';\n\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++;\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$';\n\nvar HYPHENRANGELOOSE = R++;\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$';\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++;\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i]);\n  if (!re[i])\n    re[i] = new RegExp(src[i]);\n}\n\nexports.parse = parse;\nfunction parse(version, options) {\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n\n  if (version instanceof SemVer)\n    return version;\n\n  if (typeof version !== 'string')\n    return null;\n\n  if (version.length > MAX_LENGTH)\n    return null;\n\n  var r = options.loose ? re[LOOSE] : re[FULL];\n  if (!r.test(version))\n    return null;\n\n  try {\n    return new SemVer(version, options);\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.valid = valid;\nfunction valid(version, options) {\n  var v = parse(version, options);\n  return v ? v.version : null;\n}\n\n\nexports.clean = clean;\nfunction clean(version, options) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), options);\n  return s ? s.version : null;\n}\n\nexports.SemVer = SemVer;\n\nfunction SemVer(version, options) {\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n  if (version instanceof SemVer) {\n    if (version.loose === options.loose)\n      return version;\n    else\n      version = version.version;\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  if (version.length > MAX_LENGTH)\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')\n\n  if (!(this instanceof SemVer))\n    return new SemVer(version, options);\n\n  debug('SemVer', version, options);\n  this.options = options;\n  this.loose = !!options.loose;\n\n  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);\n\n  if (!m)\n    throw new TypeError('Invalid Version: ' + version);\n\n  this.raw = version;\n\n  // these are actually numbers\n  this.major = +m[1];\n  this.minor = +m[2];\n  this.patch = +m[3];\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0)\n    throw new TypeError('Invalid major version')\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)\n    throw new TypeError('Invalid minor version')\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)\n    throw new TypeError('Invalid patch version')\n\n  // numberify any prerelease numeric ids\n  if (!m[4])\n    this.prerelease = [];\n  else\n    this.prerelease = m[4].split('.').map(function(id) {\n      if (/^[0-9]+$/.test(id)) {\n        var num = +id;\n        if (num >= 0 && num < MAX_SAFE_INTEGER)\n          return num;\n      }\n      return id;\n    });\n\n  this.build = m[5] ? m[5].split('.') : [];\n  this.format();\n}\n\nSemVer.prototype.format = function() {\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\n  if (this.prerelease.length)\n    this.version += '-' + this.prerelease.join('.');\n  return this.version;\n};\n\nSemVer.prototype.toString = function() {\n  return this.version;\n};\n\nSemVer.prototype.compare = function(other) {\n  debug('SemVer.compare', this.version, this.options, other);\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.options);\n\n  return this.compareMain(other) || this.comparePre(other);\n};\n\nSemVer.prototype.compareMain = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.options);\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch);\n};\n\nSemVer.prototype.comparePre = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.options);\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length)\n    return -1;\n  else if (!this.prerelease.length && other.prerelease.length)\n    return 1;\n  else if (!this.prerelease.length && !other.prerelease.length)\n    return 0;\n\n  var i = 0;\n  do {\n    var a = this.prerelease[i];\n    var b = other.prerelease[i];\n    debug('prerelease compare', i, a, b);\n    if (a === undefined && b === undefined)\n      return 0;\n    else if (b === undefined)\n      return 1;\n    else if (a === undefined)\n      return -1;\n    else if (a === b)\n      continue;\n    else\n      return compareIdentifiers(a, b);\n  } while (++i);\n};\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function(release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor = 0;\n      this.major++;\n      this.inc('pre', identifier);\n      break;\n    case 'preminor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor++;\n      this.inc('pre', identifier);\n      break;\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0;\n      this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0)\n        this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)\n        this.major++;\n      this.minor = 0;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0)\n        this.minor++;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0)\n        this.patch++;\n      this.prerelease = [];\n      break;\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0)\n        this.prerelease = [0];\n      else {\n        var i = this.prerelease.length;\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++;\n            i = -2;\n          }\n        }\n        if (i === -1) // didn't increment anything\n          this.prerelease.push(0);\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1]))\n            this.prerelease = [identifier, 0];\n        } else\n          this.prerelease = [identifier, 0];\n      }\n      break;\n\n    default:\n      throw new Error('invalid increment argument: ' + release);\n  }\n  this.format();\n  this.raw = this.version;\n  return this;\n};\n\nexports.inc = inc;\nfunction inc(version, release, loose, identifier) {\n  if (typeof(loose) === 'string') {\n    identifier = loose;\n    loose = undefined;\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version;\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.diff = diff;\nfunction diff(version1, version2) {\n  if (eq(version1, version2)) {\n    return null;\n  } else {\n    var v1 = parse(version1);\n    var v2 = parse(version2);\n    if (v1.prerelease.length || v2.prerelease.length) {\n      for (var key in v1) {\n        if (key === 'major' || key === 'minor' || key === 'patch') {\n          if (v1[key] !== v2[key]) {\n            return 'pre'+key;\n          }\n        }\n      }\n      return 'prerelease';\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return key;\n        }\n      }\n    }\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers;\n\nvar numeric = /^[0-9]+$/;\nfunction compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return (anum && !bnum) ? -1 :\n         (bnum && !anum) ? 1 :\n         a < b ? -1 :\n         a > b ? 1 :\n         0;\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers;\nfunction rcompareIdentifiers(a, b) {\n  return compareIdentifiers(b, a);\n}\n\nexports.major = major;\nfunction major(a, loose) {\n  return new SemVer(a, loose).major;\n}\n\nexports.minor = minor;\nfunction minor(a, loose) {\n  return new SemVer(a, loose).minor;\n}\n\nexports.patch = patch;\nfunction patch(a, loose) {\n  return new SemVer(a, loose).patch;\n}\n\nexports.compare = compare;\nfunction compare(a, b, loose) {\n  return new SemVer(a, loose).compare(new SemVer(b, loose));\n}\n\nexports.compareLoose = compareLoose;\nfunction compareLoose(a, b) {\n  return compare(a, b, true);\n}\n\nexports.rcompare = rcompare;\nfunction rcompare(a, b, loose) {\n  return compare(b, a, loose);\n}\n\nexports.sort = sort;\nfunction sort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.compare(a, b, loose);\n  });\n}\n\nexports.rsort = rsort;\nfunction rsort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.rcompare(a, b, loose);\n  });\n}\n\nexports.gt = gt;\nfunction gt(a, b, loose) {\n  return compare(a, b, loose) > 0;\n}\n\nexports.lt = lt;\nfunction lt(a, b, loose) {\n  return compare(a, b, loose) < 0;\n}\n\nexports.eq = eq;\nfunction eq(a, b, loose) {\n  return compare(a, b, loose) === 0;\n}\n\nexports.neq = neq;\nfunction neq(a, b, loose) {\n  return compare(a, b, loose) !== 0;\n}\n\nexports.gte = gte;\nfunction gte(a, b, loose) {\n  return compare(a, b, loose) >= 0;\n}\n\nexports.lte = lte;\nfunction lte(a, b, loose) {\n  return compare(a, b, loose) <= 0;\n}\n\nexports.cmp = cmp;\nfunction cmp(a, op, b, loose) {\n  var ret;\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a === b;\n      break;\n    case '!==':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a !== b;\n      break;\n    case '': case '=': case '==': ret = eq(a, b, loose); break;\n    case '!=': ret = neq(a, b, loose); break;\n    case '>': ret = gt(a, b, loose); break;\n    case '>=': ret = gte(a, b, loose); break;\n    case '<': ret = lt(a, b, loose); break;\n    case '<=': ret = lte(a, b, loose); break;\n    default: throw new TypeError('Invalid operator: ' + op);\n  }\n  return ret;\n}\n\nexports.Comparator = Comparator;\nfunction Comparator(comp, options) {\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n\n  if (comp instanceof Comparator) {\n    if (comp.loose === !!options.loose)\n      return comp;\n    else\n      comp = comp.value;\n  }\n\n  if (!(this instanceof Comparator))\n    return new Comparator(comp, options);\n\n  debug('comparator', comp, options);\n  this.options = options;\n  this.loose = !!options.loose;\n  this.parse(comp);\n\n  if (this.semver === ANY)\n    this.value = '';\n  else\n    this.value = this.operator + this.semver.version;\n\n  debug('comp', this);\n}\n\nvar ANY = {};\nComparator.prototype.parse = function(comp) {\n  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var m = comp.match(r);\n\n  if (!m)\n    throw new TypeError('Invalid comparator: ' + comp);\n\n  this.operator = m[1];\n  if (this.operator === '=')\n    this.operator = '';\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2])\n    this.semver = ANY;\n  else\n    this.semver = new SemVer(m[2], this.options.loose);\n};\n\nComparator.prototype.toString = function() {\n  return this.value;\n};\n\nComparator.prototype.test = function(version) {\n  debug('Comparator.test', version, this.options.loose);\n\n  if (this.semver === ANY)\n    return true;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.options);\n\n  return cmp(version, this.operator, this.semver, this.options);\n};\n\nComparator.prototype.intersects = function(comp, options) {\n  if (!(comp instanceof Comparator)) {\n    throw new TypeError('a Comparator is required');\n  }\n\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n\n  var rangeTmp;\n\n  if (this.operator === '') {\n    rangeTmp = new Range(comp.value, options);\n    return satisfies(this.value, rangeTmp, options);\n  } else if (comp.operator === '') {\n    rangeTmp = new Range(this.value, options);\n    return satisfies(comp.semver, rangeTmp, options);\n  }\n\n  var sameDirectionIncreasing =\n    (this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '>=' || comp.operator === '>');\n  var sameDirectionDecreasing =\n    (this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '<=' || comp.operator === '<');\n  var sameSemVer = this.semver.version === comp.semver.version;\n  var differentDirectionsInclusive =\n    (this.operator === '>=' || this.operator === '<=') &&\n    (comp.operator === '>=' || comp.operator === '<=');\n  var oppositeDirectionsLessThan =\n    cmp(this.semver, '<', comp.semver, options) &&\n    ((this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '<=' || comp.operator === '<'));\n  var oppositeDirectionsGreaterThan =\n    cmp(this.semver, '>', comp.semver, options) &&\n    ((this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '>=' || comp.operator === '>'));\n\n  return sameDirectionIncreasing || sameDirectionDecreasing ||\n    (sameSemVer && differentDirectionsInclusive) ||\n    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;\n};\n\n\nexports.Range = Range;\nfunction Range(range, options) {\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n\n  if (range instanceof Range) {\n    if (range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease) {\n      return range;\n    } else {\n      return new Range(range.raw, options);\n    }\n  }\n\n  if (range instanceof Comparator) {\n    return new Range(range.value, options);\n  }\n\n  if (!(this instanceof Range))\n    return new Range(range, options);\n\n  this.options = options;\n  this.loose = !!options.loose;\n  this.includePrerelease = !!options.includePrerelease\n\n  // First, split based on boolean or ||\n  this.raw = range;\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\n    return this.parseRange(range.trim());\n  }, this).filter(function(c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length;\n  });\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range);\n  }\n\n  this.format();\n}\n\nRange.prototype.format = function() {\n  this.range = this.set.map(function(comps) {\n    return comps.join(' ').trim();\n  }).join('||').trim();\n  return this.range;\n};\n\nRange.prototype.toString = function() {\n  return this.range;\n};\n\nRange.prototype.parseRange = function(range) {\n  var loose = this.options.loose;\n  range = range.trim();\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\n  range = range.replace(hr, hyphenReplace);\n  debug('hyphen replace', range);\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\n  debug('comparator trim', range, re[COMPARATORTRIM]);\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace);\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ');\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var set = range.split(' ').map(function(comp) {\n    return parseComparator(comp, this.options);\n  }, this).join(' ').split(/\\s+/);\n  if (this.options.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function(comp) {\n      return !!comp.match(compRe);\n    });\n  }\n  set = set.map(function(comp) {\n    return new Comparator(comp, this.options);\n  }, this);\n\n  return set;\n};\n\nRange.prototype.intersects = function(range, options) {\n  if (!(range instanceof Range)) {\n    throw new TypeError('a Range is required');\n  }\n\n  return this.set.some(function(thisComparators) {\n    return thisComparators.every(function(thisComparator) {\n      return range.set.some(function(rangeComparators) {\n        return rangeComparators.every(function(rangeComparator) {\n          return thisComparator.intersects(rangeComparator, options);\n        });\n      });\n    });\n  });\n};\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators;\nfunction toComparators(range, options) {\n  return new Range(range, options).set.map(function(comp) {\n    return comp.map(function(c) {\n      return c.value;\n    }).join(' ').trim().split(' ');\n  });\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator(comp, options) {\n  debug('comp', comp, options);\n  comp = replaceCarets(comp, options);\n  debug('caret', comp);\n  comp = replaceTildes(comp, options);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, options);\n  debug('xrange', comp);\n  comp = replaceStars(comp, options);\n  debug('stars', comp);\n  return comp;\n}\n\nfunction isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes(comp, options) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceTilde(comp, options);\n  }).join(' ');\n}\n\nfunction replaceTilde(comp, options) {\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n  var r = options.loose ? re[TILDELOOSE] : re[TILDE];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p))\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    else if (pr) {\n      debug('replaceTilde pr', pr);\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      ret = '>=' + M + '.' + m + '.' + p + pr +\n            ' <' + M + '.' + (+m + 1) + '.0';\n    } else\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0';\n\n    debug('tilde return', ret);\n    return ret;\n  });\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets(comp, options) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceCaret(comp, options);\n  }).join(' ');\n}\n\nfunction replaceCaret(comp, options) {\n  debug('caret', comp, options);\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n  var r = options.loose ? re[CARETLOOSE] : re[CARET];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p)) {\n      if (M === '0')\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      else\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p + pr +\n              ' <' + (+M + 1) + '.0.0';\n    } else {\n      debug('no pr');\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0';\n    }\n\n    debug('caret return', ret);\n    return ret;\n  });\n}\n\nfunction replaceXRanges(comp, options) {\n  debug('replaceXRanges', comp, options);\n  return comp.split(/\\s+/).map(function(comp) {\n    return replaceXRange(comp, options);\n  }).join(' ');\n}\n\nfunction replaceXRange(comp, options) {\n  comp = comp.trim();\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX)\n      gtlt = '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // replace X with 0\n      if (xm)\n        m = 0;\n      if (xp)\n        p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else if (xp) {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<';\n        if (xm)\n          M = +M + 1;\n        else\n          m = +m + 1;\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p;\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    }\n\n    debug('xRange return', ret);\n\n    return ret;\n  });\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars(comp, options) {\n  debug('replaceStars', comp, options);\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '');\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace($0,\n                       from, fM, fm, fp, fpr, fb,\n                       to, tM, tm, tp, tpr, tb) {\n\n  if (isX(fM))\n    from = '';\n  else if (isX(fm))\n    from = '>=' + fM + '.0.0';\n  else if (isX(fp))\n    from = '>=' + fM + '.' + fm + '.0';\n  else\n    from = '>=' + from;\n\n  if (isX(tM))\n    to = '';\n  else if (isX(tm))\n    to = '<' + (+tM + 1) + '.0.0';\n  else if (isX(tp))\n    to = '<' + tM + '.' + (+tm + 1) + '.0';\n  else if (tpr)\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n  else\n    to = '<=' + to;\n\n  return (from + ' ' + to).trim();\n}\n\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function(version) {\n  if (!version)\n    return false;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.options);\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version, this.options))\n      return true;\n  }\n  return false;\n};\n\nfunction testSet(set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version))\n      return false;\n  }\n\n  if (!options)\n    options = {}\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var i = 0; i < set.length; i++) {\n      debug(set[i].semver);\n      if (set[i].semver === ANY)\n        continue;\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver;\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch)\n          return true;\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n\n  return true;\n}\n\nexports.satisfies = satisfies;\nfunction satisfies(version, range, options) {\n  try {\n    range = new Range(range, options);\n  } catch (er) {\n    return false;\n  }\n  return range.test(version);\n}\n\nexports.maxSatisfying = maxSatisfying;\nfunction maxSatisfying(versions, range, options) {\n  var max = null;\n  var maxSV = null;\n  try {\n    var rangeObj = new Range(range, options);\n  } catch (er) {\n    return null;\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) { // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) { // compare(max, v, true)\n        max = v;\n        maxSV = new SemVer(max, options);\n      }\n    }\n  })\n  return max;\n}\n\nexports.minSatisfying = minSatisfying;\nfunction minSatisfying(versions, range, options) {\n  var min = null;\n  var minSV = null;\n  try {\n    var rangeObj = new Range(range, options);\n  } catch (er) {\n    return null;\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) { // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) { // compare(min, v, true)\n        min = v;\n        minSV = new SemVer(min, options);\n      }\n    }\n  })\n  return min;\n}\n\nexports.validRange = validRange;\nfunction validRange(range, options) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*';\n  } catch (er) {\n    return null;\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr;\nfunction ltr(version, range, options) {\n  return outside(version, range, '<', options);\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr;\nfunction gtr(version, range, options) {\n  return outside(version, range, '>', options);\n}\n\nexports.outside = outside;\nfunction outside(version, range, hilo, options) {\n  version = new SemVer(version, options);\n  range = new Range(range, options);\n\n  var gtfn, ltefn, ltfn, comp, ecomp;\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false;\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n\n    var high = null;\n    var low = null;\n\n    comparators.forEach(function(comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator;\n      low = low || comparator;\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator;\n      }\n    });\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexports.prerelease = prerelease;\nfunction prerelease(version, options) {\n  var parsed = parse(version, options);\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;\n}\n\nexports.intersects = intersects;\nfunction intersects(r1, r2, options) {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\n\nexports.coerce = coerce;\nfunction coerce(version) {\n  if (version instanceof SemVer)\n    return version;\n\n  if (typeof version !== 'string')\n    return null;\n\n  var match = version.match(re[COERCE]);\n\n  if (match == null)\n    return null;\n\n  return parse((match[1] || '0') + '.' + (match[2] || '0') + '.' + (match[3] || '0')); \n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/node-libs-browser/node_modules/process/browser.js */ \"../../node_modules/node-libs-browser/node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://AsBridge/./node_modules/semver/semver.js?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: VLBridge */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _vl_VLBridge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vl/VLBridge */ \"./src/vl/VLBridge.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VLBridge\", function() { return _vl_VLBridge__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n\n\n\n\n//# sourceURL=webpack://AsBridge/./src/index.ts?");

/***/ }),

/***/ "./src/vl/VLBridge.ts":
/*!****************************!*\
  !*** ./src/vl/VLBridge.ts ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! semver */ \"./node_modules/semver/semver.js\");\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(semver__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _category_CategoryFilter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./category/CategoryFilter */ \"./src/vl/category/CategoryFilter.ts\");\n/* harmony import */ var _histogram_CategoricalHistogramFilter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./histogram/CategoricalHistogramFilter */ \"./src/vl/histogram/CategoricalHistogramFilter.ts\");\n/* harmony import */ var _histogram_NumericalHistogramFilter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./histogram/NumericalHistogramFilter */ \"./src/vl/histogram/NumericalHistogramFilter.ts\");\n/* harmony import */ var _time_series_TimeSeries__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./time-series/TimeSeries */ \"./src/vl/time-series/TimeSeries.ts\");\n\n\n\n\n\nvar VL_VERSION = '^1.1.0';\n/**\n * This class is the main interface to bind a VL layer to one or more Airship widgets.\n *\n * The normal usage is create an instance and use its public methods to generate filters for\n * different widgets.\n *\n * After you have specified all the required filters, simply call the method `build` and all will be\n * handled for you. Internally, a new layer will be created with an invisible Viz, as a source for all\n * the widget's data.\n *\n * Some caveats:\n * - You can create as many filters for a column you want, but only one per widget.\n * - If you enable non-read-only capabilities, it is recommended that the Viz filter property not to\n * be changed, as it will be changed internally by each filter.\n *\n * @export\n * @class VLBridge\n */\nvar VLBridge = /** @class */ (function () {\n    /**\n     * Creates an instance of VLBridge.\n     *\n     * The CARTO VL namespace is required to create new expressions\n     * The map is required in order to add an internal invisble layer to it\n     * The VL Layer is used for event handling purposes\n     * The source will be reused for the internal invisible layer\n     *\n     * @param {*} carto CARTO VL namespace\n     * @param {*} map CARTO VL map instance (Mapbox gl)\n     * @param {*} layer CARTO VL layer\n     * @param {*} source CARTO VL source\n     * @memberof VLBridge\n     */\n    function VLBridge(carto, map, layer, source) {\n        this._vizFilters = [];\n        this._carto = carto;\n        this._map = map;\n        this._layer = layer;\n        this._source = source;\n        this._id = layer.id;\n        this._rebuildFilters = this._rebuildFilters.bind(this);\n        this._updateDataLayerVariables = this._updateDataLayerVariables.bind(this);\n        if (!semver__WEBPACK_IMPORTED_MODULE_0___default.a.satisfies(carto.version, VL_VERSION)) {\n            throw new Error(\"Provided VL version \" + carto.version + \" not supported. Must satisfy \" + VL_VERSION);\n        }\n    }\n    /**\n     * Create a numerical histogram filter. See {@link NumericalHistogramOptions} for more details\n     *\n     * @param {NumericalHistogramOptions} args\n     * @returns\n     * @memberof VLBridge\n     */\n    VLBridge.prototype.numericalHistogram = function (args) {\n        var column = args.column, buckets = args.buckets, bucketRanges = args.bucketRanges, readOnly = args.readOnly, widget = args.widget;\n        var histogram = new _histogram_NumericalHistogramFilter__WEBPACK_IMPORTED_MODULE_3__[\"NumericalHistogramFilter\"](this._carto, this._layer, widget, column, buckets, this._source, bucketRanges, readOnly);\n        this._addFilter(histogram);\n        return histogram;\n    };\n    /**\n     * Create a categorical histogram filter. See {@link CategoricalHistogramOptions} for more details\n     *\n     * @param {CategoricalHistogramOptions} args\n     * @returns\n     * @memberof VLBridge\n     */\n    VLBridge.prototype.categoricalHistogram = function (args) {\n        var column = args.column, readOnly = args.readOnly, widget = args.widget;\n        var histogram = new _histogram_CategoricalHistogramFilter__WEBPACK_IMPORTED_MODULE_2__[\"CategoricalHistogramFilter\"](this._carto, this._layer, widget, column, this._source, readOnly);\n        this._addFilter(histogram);\n        return histogram;\n    };\n    /**\n     * Creates a numerical or categorical histogram, depending on the arguments.\n     *\n     * If neither buckets or bucketRanges are provided, a categorical one will be created. A numerical one otherwise\n     *\n     * @param {NumericalHistogramOptions} args\n     * @returns\n     * @memberof VLBridge\n     */\n    VLBridge.prototype.histogram = function (args) {\n        var column = args.column, buckets = args.buckets, bucketRanges = args.bucketRanges, readOnly = args.readOnly, widget = args.widget;\n        if (buckets === undefined && bucketRanges === undefined) {\n            var histogramWidget = widget;\n            return this.categoricalHistogram({ column: column, readOnly: readOnly, widget: histogramWidget });\n        }\n        return this.numericalHistogram({ column: column, readOnly: readOnly, buckets: buckets, bucketRanges: bucketRanges, widget: widget });\n    };\n    /**\n     * Creates a category widget filter. See {@link CategoryOptions} for more details\n     *\n     * @param {CategoryOptions} args\n     * @returns\n     * @memberof VLBridge\n     */\n    VLBridge.prototype.category = function (args) {\n        var column = args.column, readOnly = args.readOnly, widget = args.widget;\n        var category = new _category_CategoryFilter__WEBPACK_IMPORTED_MODULE_1__[\"CategoryFilter\"](this._carto, this._layer, widget, column, this._source, readOnly);\n        this._addFilter(category);\n        return category;\n    };\n    /**\n     * Creates a time series widget filter.\n     *\n     * Internally this creates a {@link NumericalHistogramFilter} and instances a {@link TimeSeries}.\n     *\n     * One will take care of the histogram part and the other of the animation parts.\n     *\n     * There can only be one animation per layer (per VLBridge instance)\n     *\n     * @param {CategoryOptions} args\n     * @returns\n     * @memberof VLBridge\n     */\n    VLBridge.prototype.timeSeries = function (_a) {\n        var _this = this;\n        var column = _a.column, buckets = _a.buckets, readOnly = _a.readOnly, widget = _a.widget;\n        if (this._animation) {\n            throw new Error('There can only be one Time Series animation');\n        }\n        this._animation = new _time_series_TimeSeries__WEBPACK_IMPORTED_MODULE_4__[\"TimeSeries\"](this._layer, widget, function () {\n            _this._rebuildFilters();\n        });\n        var histogram = this.numericalHistogram({\n            buckets: buckets,\n            column: column,\n            readOnly: readOnly,\n            widget: widget\n        });\n        histogram.setTimeSeries(true);\n        histogram.on('rangeChanged', function (range) {\n            _this._animation.setRange(range);\n        });\n    };\n    /**\n     * Call this method after creating all the different filters you require.\n     *\n     * It will internally do the following:\n     *  - Add new variables to your Viz, with the columns of all the non-read-only filters\n     *  - Create a new layer as the filters' data source\n     * @returns\n     * @memberof VLBridge\n     */\n    VLBridge.prototype.build = function () {\n        var _this = this;\n        if (this._vizFilters.length === 0) {\n            return;\n        }\n        var onLoaded = function () {\n            _this._appendVariables();\n            _this._buildDataLayer();\n        };\n        if (!this._layer.viz) {\n            this._layer.on('loaded', onLoaded);\n        }\n        else {\n            onLoaded();\n        }\n    };\n    VLBridge.prototype._addFilter = function (filter) {\n        filter.on('filterChanged', this._rebuildFilters);\n        filter.on('expressionReady', this._updateDataLayerVariables);\n        this._vizFilters.push(filter);\n    };\n    /**\n     * This will append extra variables with all the columns of non-read-only filters.\n     *\n     * This is required so that whenever the filter is changed, the original viz layer\n     * can be filtered by it.\n     *\n     * @private\n     * @memberof VLBridge\n     */\n    VLBridge.prototype._appendVariables = function () {\n        var _this = this;\n        var s = this._carto.expressions;\n        this._vizFilters.forEach(function (filter) { return _this._layer.viz.variables[filter.name + \"_col\"] = s.prop(filter.column); });\n    };\n    /**\n     * This will create a new Layer using the same source as the original, add it to the map, and\n     * pass it to all the filters so they can hook up to read the data\n     *\n     * It has style properties to make it invisible, plus all the expressions created by each filter.\n     *\n     * @private\n     * @memberof VLBridge\n     */\n    VLBridge.prototype._buildDataLayer = function () {\n        var _this = this;\n        var variables = this._getVariables();\n        var s = this._carto.expressions;\n        var viz = new this._carto.Viz({\n            color: s.rgba(0, 0, 0, 0),\n            strokeWidth: 0,\n            variables: variables,\n        });\n        this._readOnlyLayer = new this._carto.Layer(\"asbind_ro_\" + this._id, this._source, viz);\n        this._readOnlyLayer.addTo(this._map);\n        this._vizFilters.forEach(function (filter) { return filter.setDataLayer(_this._readOnlyLayer); });\n    };\n    VLBridge.prototype._getVariables = function () {\n        var variables = this._readOnlyLayer !== undefined ? this._readOnlyLayer.viz.variables : {};\n        for (var _i = 0, _a = this._vizFilters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            var name_1 = filter.name;\n            if (filter.globalExpression) {\n                variables[name_1 + \"_global\"] = filter.globalExpression;\n            }\n            if (filter.expression) {\n                variables[name_1] = filter.expression;\n            }\n        }\n        return variables;\n    };\n    VLBridge.prototype._updateDataLayerVariables = function (payload) {\n        if (!this._readOnlyLayer.viz) {\n            return;\n        }\n        this._readOnlyLayer.viz.variables[payload.name] = payload.expression;\n    };\n    /**\n     * Gather all the VL filters from each filter, combine them and filter both the data layer and\n     * the original layer with it.\n     *\n     * If there is an animation involved, it uses @animation and all the filters.\n     *\n     * @private\n     * @memberof VLBridge\n     */\n    VLBridge.prototype._rebuildFilters = function () {\n        var newFilter = this._combineFilters(this._vizFilters\n            .filter(function (hasFilter) { return hasFilter.filter !== null; })\n            .map(function (hasFilter) { return hasFilter.filter; }));\n        // Update (if required) the readonly layer\n        if (this._readOnlyLayer) {\n            this._readOnlyLayer.viz.filter.blendTo(newFilter, 0);\n        }\n        if (this._animation) {\n            newFilter = \"@animation and \" + newFilter;\n        }\n        // Update the Visualization filter\n        this._layer.viz.filter.blendTo(newFilter, 0);\n    };\n    VLBridge.prototype._combineFilters = function (filters) {\n        if (filters.length === 0) {\n            return '1';\n        }\n        return filters.join(' and ');\n    };\n    return VLBridge;\n}());\n/* harmony default export */ __webpack_exports__[\"default\"] = (VLBridge);\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/VLBridge.ts?");

/***/ }),

/***/ "./src/vl/base/BaseFilter.ts":
/*!***********************************!*\
  !*** ./src/vl/base/BaseFilter.ts ***!
  \***********************************/
/*! exports provided: BaseFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseFilter\", function() { return BaseFilter; });\n/* harmony import */ var mitt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mitt */ \"../../node_modules/mitt/dist/mitt.es.js\");\n\n/**\n * Base class for all possible CARTO VL Filters to be combined with Airship\n *\n * @export\n * @abstract\n * @class BaseFilter\n */\nvar BaseFilter = /** @class */ (function () {\n    /**\n     * Creates an instance of BaseFilter.\n     * @param {string} type A type describing what widget this filter represents\n     * @param {string} column The column this filter is related to\n     * @param {*} layer A CARTO VL layer\n     * @param {*} source A CARTO VL source\n     * @param {boolean} [readOnly=true] Whether this filter should be read only or not\n     * @memberof BaseFilter\n     */\n    function BaseFilter(type, column, layer, source, readOnly) {\n        if (readOnly === void 0) { readOnly = true; }\n        this._emitter = new mitt__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this._name = \"asbind_\" + type + \"_\" + column + \"_\" + BaseFilter._counter;\n        this._column = column;\n        this._layer = layer;\n        this._source = source;\n        this._readOnly = readOnly;\n        BaseFilter._counter++;\n        this._loadLegendData = this._loadLegendData.bind(this);\n    }\n    Object.defineProperty(BaseFilter.prototype, \"globalExpression\", {\n        /**\n         * If the filter returns this, this expression will be assigned to a variable called this.name_global\n         *\n         * @readonly\n         * @abstract\n         * @type {*}\n         * @memberof BaseFilter\n         */\n        get: function () {\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseFilter.prototype, \"name\", {\n        /**\n         * Returns the name of the filter. The name is a compound of the type, the column and an internal counter to prevent\n         * collisions. It will be used as the name for the VL variable containing BaseFilter.expression.\n         *\n         * @readonly\n         * @type {string}\n         * @memberof BaseFilter\n         */\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseFilter.prototype, \"column\", {\n        /**\n         * Get the column of the filter.\n         *\n         * @readonly\n         * @type {string}\n         * @memberof BaseFilter\n         */\n        get: function () {\n            return this._column;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseFilter.prototype, \"readOnly\", {\n        /**\n         * Get whether the filter is read only or not.\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberof BaseFilter\n         */\n        get: function () {\n            return this._readOnly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseFilter.prototype, \"layer\", {\n        /**\n         * Get the currently set CARTO VL Visualization layer.\n         *\n         * @readonly\n         * @type {*}\n         * @memberof BaseFilter\n         */\n        get: function () {\n            return this._layer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseFilter.prototype, \"source\", {\n        /**\n         * Get the current CARTO VL source.\n         *\n         * @readonly\n         * @type {*}\n         * @memberof BaseFilter\n         */\n        get: function () {\n            return this._source;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Bind to an event of the filter. Currently only `filterChanged` is supported.\n     *\n     * @param {string} type\n     * @param {mitt.Handler} handler\n     * @memberof BaseFilter\n     */\n    BaseFilter.prototype.on = function (type, handler) {\n        this._emitter.on(type, handler);\n    };\n    /**\n     * Set LegendData, which can be used by certain filter implementations to display colors\n     * for certain values.\n     *\n     * @param {LegendData} legendData\n     * @memberof BaseFilter\n     */\n    BaseFilter.prototype.setLegendData = function (legendData) {\n        this._legendData = legendData.data;\n    };\n    /**\n     * Automatically extract LegendData from the CARTO VL Viz object. This requires the `color` property\n     * in the Viz object to be a ramp.\n     *\n     * @memberof BaseFilter\n     */\n    BaseFilter.prototype.enableColorMapping = function () {\n        this._mapColors = true;\n        if (this._layer.viz) {\n            this._loadLegendData();\n        }\n        else {\n            this._layer.on('loaded', this._loadLegendData);\n        }\n    };\n    /**\n     * Trigger a filterChanged event\n     *\n     * @protected\n     * @memberof BaseFilter\n     */\n    BaseFilter.prototype._filterChanged = function () {\n        this._emitter.emit('filterChanged', this._name);\n    };\n    /**\n     * Load the legend data from the Viz object. Used from `enableColorMapping`\n     *\n     * @protected\n     * @returns\n     * @memberof BaseFilter\n     */\n    BaseFilter.prototype._loadLegendData = function () {\n        var color = this._layer.viz.color;\n        if (!color.getLegendData) {\n            return;\n        }\n        this.setLegendData(color.getLegendData(this._getLegendConfig()));\n    };\n    /**\n     * Override this method on a specific filter to configure CARTO VL ramps getLegendData arguments\n     *\n     * @protected\n     * @returns\n     * @memberof BaseFilter\n     */\n    BaseFilter.prototype._getLegendConfig = function () {\n        return undefined;\n    };\n    // Internal counter to prevent colission between filters for the same\n    // column and the same type\n    BaseFilter._counter = 0;\n    return BaseFilter;\n}());\n\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/base/BaseFilter.ts?");

/***/ }),

/***/ "./src/vl/category/CategoryFilter.ts":
/*!*******************************************!*\
  !*** ./src/vl/category/CategoryFilter.ts ***!
  \*******************************************/
/*! exports provided: CategoryFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CategoryFilter\", function() { return CategoryFilter; });\n/* harmony import */ var _base_BaseFilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/BaseFilter */ \"./src/vl/base/BaseFilter.ts\");\n/* harmony import */ var _utils_comparison_histogram__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/comparison/histogram */ \"./src/vl/utils/comparison/histogram/index.ts\");\n/* harmony import */ var _utils_conversion_category__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/conversion/category */ \"./src/vl/utils/conversion/category/index.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * Class that binds a CARTO VL categorical histogram to an Airship category widget\n *\n * @export\n * @class CategoryFilter\n * @extends {BaseFilter}\n */\nvar CategoryFilter = /** @class */ (function (_super) {\n    __extends(CategoryFilter, _super);\n    /**\n     * Creates an instance of CategoryFilter.\n     * @param {*} carto CARTO VL namespace\n     * @param {*} layer CARTO VL layer\n     * @param {HTMLAsCategoryWidgetElement} widget A Category Widget HTML element\n     * @param {string} columnName The column to pull data from\n     * @param {*} source CARTO VL source\n     * @param {boolean} [readOnly=true] Whether this widget filters or not\n     * @memberof CategoryFilter\n     */\n    function CategoryFilter(carto, layer, widget, columnName, source, readOnly) {\n        if (readOnly === void 0) { readOnly = true; }\n        var _this = _super.call(this, \"category\", columnName, layer, source, readOnly) || this;\n        _this._selection = [];\n        _this._lastHistogram = null;\n        _this._widget = widget;\n        _this._carto = carto;\n        widget.disableInteractivity = readOnly;\n        widget.showClearButton = !readOnly;\n        _this.selectionChanged = _this.selectionChanged.bind(_this);\n        if (!readOnly) {\n            _this._widget.addEventListener('categoriesSelected', _this.selectionChanged);\n        }\n        return _this;\n    }\n    CategoryFilter.prototype.setDataLayer = function (layer) {\n        var _this = this;\n        this._dataLayer = layer;\n        this._dataLayer.on('updated', function () {\n            var newHistogram = _this._dataLayer.viz.variables[_this.name];\n            if (!newHistogram) {\n                return;\n            }\n            if (_this._lastHistogram === null || !Object(_utils_comparison_histogram__WEBPACK_IMPORTED_MODULE_1__[\"isCategoricalHistogramEqual\"])(_this._lastHistogram, newHistogram)) {\n                _this._lastHistogram = { value: newHistogram.value };\n                _this._widget.categories = Object(_utils_conversion_category__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(newHistogram, _this._legendData);\n            }\n        });\n    };\n    Object.defineProperty(CategoryFilter.prototype, \"filter\", {\n        get: function () {\n            if (this._selection.length === 0) {\n                return null;\n            }\n            else {\n                return \"$\" + this._column + \" in [\" + this._selection.map(function (value) { return \"'\" + value + \"'\"; }).join(',') + \"]\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryFilter.prototype, \"expression\", {\n        get: function () {\n            var s = this._carto.expressions;\n            return s.viewportHistogram(s.prop(this._column));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CategoryFilter.prototype.selectionChanged = function (evt) {\n        this._selection = evt.detail;\n        this._filterChanged();\n    };\n    return CategoryFilter;\n}(_base_BaseFilter__WEBPACK_IMPORTED_MODULE_0__[\"BaseFilter\"]));\n\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/category/CategoryFilter.ts?");

/***/ }),

/***/ "./src/vl/histogram/BaseHistogramFilter.ts":
/*!*************************************************!*\
  !*** ./src/vl/histogram/BaseHistogramFilter.ts ***!
  \*************************************************/
/*! exports provided: BaseHistogramFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseHistogramFilter\", function() { return BaseHistogramFilter; });\n/* harmony import */ var _base_BaseFilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/BaseFilter */ \"./src/vl/base/BaseFilter.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/**\n * Base class for Filters based on Airship Histogram Widgets\n *\n * @export\n * @abstract\n * @class BaseHistogramFilter\n * @extends {BaseFilter}\n * @template T Type of the selection. Typicall an array of number or strings\n */\nvar BaseHistogramFilter = /** @class */ (function (_super) {\n    __extends(BaseHistogramFilter, _super);\n    /**\n     * Creates an instance of BaseHistogramFilter.\n     * @param {('categorical' | 'numerical')} type Whether it is a categorical or a numerical histogram\n     * @param {*} carto The CARTO VL namespace\n     * @param {*} layer A CARTO VL layer\n     * @param {(HTMLAsTimeSeriesWidgetElement | HTMLAsHistogramWidgetElement)} histogram\n     * An Airship Histogram or TimeSeries HTML element\n     * @param {string} columnName The column to pull data from\n     * @param {*} source A CARTO VL source\n     * @param {boolean} [readOnly=true] Whether the widget will be able to filter the visualization or not\n     * @memberof BaseHistogramFilter\n     */\n    function BaseHistogramFilter(type, carto, layer, histogram, columnName, source, readOnly) {\n        if (readOnly === void 0) { readOnly = true; }\n        var _this = _super.call(this, \"histogram_\" + type, columnName, layer, source, readOnly) || this;\n        _this._selection = null;\n        _this._widget = histogram;\n        _this._carto = carto;\n        histogram.disableInteractivity = readOnly;\n        histogram.showClear = !readOnly;\n        _this.selectionChanged = _this.selectionChanged.bind(_this);\n        if (!readOnly) {\n            _this._widget.addEventListener('selectionChanged', _this.selectionChanged);\n        }\n        return _this;\n    }\n    BaseHistogramFilter.prototype.removeHistogramLayer = function () {\n        this._layer.remove();\n    };\n    BaseHistogramFilter.prototype.setDataLayer = function (layer) {\n        this._dataLayer = layer;\n        this.bindDataLayer();\n    };\n    BaseHistogramFilter.prototype._getLegendConfig = function () {\n        return {\n            samples: this._buckets\n        };\n    };\n    return BaseHistogramFilter;\n}(_base_BaseFilter__WEBPACK_IMPORTED_MODULE_0__[\"BaseFilter\"]));\n\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/histogram/BaseHistogramFilter.ts?");

/***/ }),

/***/ "./src/vl/histogram/CategoricalHistogramFilter.ts":
/*!********************************************************!*\
  !*** ./src/vl/histogram/CategoricalHistogramFilter.ts ***!
  \********************************************************/
/*! exports provided: CategoricalHistogramFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CategoricalHistogramFilter\", function() { return CategoricalHistogramFilter; });\n/* harmony import */ var _utils_comparison_histogram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/comparison/histogram */ \"./src/vl/utils/comparison/histogram/index.ts\");\n/* harmony import */ var _utils_conversion_histogram__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/conversion/histogram */ \"./src/vl/utils/conversion/histogram/index.ts\");\n/* harmony import */ var _BaseHistogramFilter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BaseHistogramFilter */ \"./src/vl/histogram/BaseHistogramFilter.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * This class is an especialization of the HistogramFilter for categorical histograms, i.e. those\n * which instead of a numerical range, have a category for each bucket. The selection is an array\n * of strings, and the expression it provides for VL is a viewportHistogram with only a column.\n *\n * As for the filter, it uses the $column in [] expression of VL\n *\n * @export\n * @class CategoricalHistogramFilter\n * @extends {BaseHistogramFilter<string[]>}\n */\nvar CategoricalHistogramFilter = /** @class */ (function (_super) {\n    __extends(CategoricalHistogramFilter, _super);\n    /**\n     * Creates an instance of CategoricalHistogramFilter.\n     * @param {*} carto CARTO VL namespace\n     * @param {*} layer CARTO VL layer\n     * @param {(HTMLAsTimeSeriesWidgetElement | HTMLAsHistogramWidgetElement)} histogram\n     * Airship histogram widget HTML element\n     * @param {string} columnName The column to pull data from\n     * @param {*} source CARTO VL source\n     * @param {boolean} [readOnly=true] Whether this histogram allows filtering or not\n     * @memberof CategoricalHistogramFilter\n     */\n    function CategoricalHistogramFilter(carto, layer, histogram, columnName, source, readOnly) {\n        if (readOnly === void 0) { readOnly = true; }\n        var _this = _super.call(this, 'categorical', carto, layer, histogram, columnName, source, readOnly) || this;\n        _this._lastHistogram = null;\n        return _this;\n    }\n    Object.defineProperty(CategoricalHistogramFilter.prototype, \"filter\", {\n        /**\n         * Returns either null or an expression like: `$column in [_selection]`\n         *\n         * @readonly\n         * @type {string}\n         * @memberof CategoricalHistogramFilter\n         */\n        get: function () {\n            if (this._selection === null) {\n                return null;\n            }\n            else {\n                return \"$\" + this._column + \" in [\" + this._selection.map(function (value) { return \"'\" + value + \"'\"; }).join(',') + \"]\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoricalHistogramFilter.prototype, \"expression\", {\n        /**\n         * Returns a viewportHistogram with only the column as an argument (no buckets)\n         *\n         * @readonly\n         * @type {*}\n         * @memberof CategoricalHistogramFilter\n         */\n        get: function () {\n            var s = this._carto.expressions;\n            return s.viewportHistogram(s.prop(this._column));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CategoricalHistogramFilter.prototype.bindDataLayer = function () {\n        var _this = this;\n        this._dataLayer.on('updated', function () {\n            var newHistogram = _this._dataLayer.viz.variables[_this.name];\n            if (!newHistogram) {\n                return;\n            }\n            if (_this._lastHistogram === null || !Object(_utils_comparison_histogram__WEBPACK_IMPORTED_MODULE_0__[\"isCategoricalHistogramEqual\"])(_this._lastHistogram, newHistogram)) {\n                _this._lastHistogram = { value: newHistogram.value };\n                _this._widget.data = _utils_conversion_histogram__WEBPACK_IMPORTED_MODULE_1__[\"categorical\"](newHistogram, _this._legendData);\n            }\n        });\n    };\n    CategoricalHistogramFilter.prototype.selectionChanged = function (evt) {\n        if (evt.detail === null) {\n            this._selection = null;\n        }\n        else {\n            var selection = evt.detail.selection;\n            this._selection = selection.map(function (value) { return value; });\n        }\n        this._filterChanged();\n    };\n    return CategoricalHistogramFilter;\n}(_BaseHistogramFilter__WEBPACK_IMPORTED_MODULE_2__[\"BaseHistogramFilter\"]));\n\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/histogram/CategoricalHistogramFilter.ts?");

/***/ }),

/***/ "./src/vl/histogram/NumericalHistogramFilter.ts":
/*!******************************************************!*\
  !*** ./src/vl/histogram/NumericalHistogramFilter.ts ***!
  \******************************************************/
/*! exports provided: NumericalHistogramFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NumericalHistogramFilter\", function() { return NumericalHistogramFilter; });\n/* harmony import */ var _utils_comparison_histogram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/comparison/histogram */ \"./src/vl/utils/comparison/histogram/index.ts\");\n/* harmony import */ var _utils_conversion_histogram__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/conversion/histogram */ \"./src/vl/utils/conversion/histogram/index.ts\");\n/* harmony import */ var _BaseHistogramFilter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BaseHistogramFilter */ \"./src/vl/histogram/BaseHistogramFilter.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * This class is an especialization of the HistogramFilter for numerical histograms, i.e. those in\n * which each bucket have a start / end value. The selection is an array of numbers.\n *\n * The expression it provides for VL is a viewportHistogram with either a number of buckets, or an array\n * describing each buckets range. The latter is recommended for non-read-only ones.\n *\n * As for the filter, it uses the $column >= selection[0] && $column < selection[1]\n *\n * @export\n * @class NumericalHistogramFilter\n * @extends {BaseHistogramFilter<[number, number]>}\n */\nvar NumericalHistogramFilter = /** @class */ (function (_super) {\n    __extends(NumericalHistogramFilter, _super);\n    /**\n     * Creates an instance of NumericalHistogramFilter.\n     *\n     * If an array of buckets (bucketRanges) is provided, nBuckets is ignored, and the number of buckets\n     * is the length of said array.\n     *\n     * @param {*} carto CARTO VL namespace\n     * @param {*} layer CARTO VL layer\n     * @param {(HTMLAsTimeSeriesWidgetElement | HTMLAsHistogramWidgetElement)} histogram\n     * Airship histogram / time series HTML element\n     * @param {string} columnName Column to pull data from\n     * @param {number} nBuckets Number of buckets\n     * @param {*} source CARTO VL source\n     * @param {BucketRange[]} bucketRanges Array describing the bucket ranges. This has priority over nBuckets.\n     * See https://carto.com/developers/carto-vl/reference/#cartoexpressionsviewporthistogram for more information\n     * @param {boolean} [readOnly=true] Whether this histogram can filter the Visualization or not.\n     * @memberof NumericalHistogramFilter\n     */\n    function NumericalHistogramFilter(carto, layer, histogram, columnName, nBuckets, source, bucketRanges, readOnly, showTotals) {\n        if (readOnly === void 0) { readOnly = true; }\n        if (showTotals === void 0) { showTotals = false; }\n        var _this = _super.call(this, 'numerical', carto, layer, histogram, columnName, source, readOnly) || this;\n        _this._lastHistogram = null;\n        _this._buckets = bucketRanges !== undefined ? bucketRanges.length : nBuckets;\n        _this._bucketRanges = bucketRanges;\n        _this._totals = showTotals;\n        return _this;\n    }\n    Object.defineProperty(NumericalHistogramFilter.prototype, \"filter\", {\n        /**\n         * Returns $column >= selection[0] && $column < selection[1]\n         *\n         * If this is used on a time series, it does not filter at all.\n         *\n         * @readonly\n         * @type {string}\n         * @memberof NumericalHistogramFilter\n         */\n        get: function () {\n            if (this._selection === null || this._isTimeSeries) {\n                return null;\n            }\n            return \"($\" + this._column + \" >= \" + this._selection[0] + \" and $\" + this._column + \" < \" + this._selection[1] + \")\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericalHistogramFilter.prototype, \"expression\", {\n        /**\n         * Generates a viewportHistogram with either a number of buckets or an array of buckets.\n         *\n         * The array has priority over the number of buckets.\n         *\n         * @readonly\n         * @type {string}\n         * @memberof NumericalHistogramFilter\n         */\n        get: function () {\n            if (this._totals && !this._globalHistogram) {\n                return null;\n            }\n            var s = this._carto.expressions;\n            return s.viewportHistogram(s.prop(this._column), this._bucketArg());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericalHistogramFilter.prototype, \"globalExpression\", {\n        get: function () {\n            if (!this._totals) {\n                return null;\n            }\n            var s = this._carto.expressions;\n            return s.globalHistogram(s.prop(this._column), this._bucketArg());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Mark this histogram as a the source for a time-series.\n     *\n     * @param {boolean} value\n     * @memberof NumericalHistogramFilter\n     */\n    NumericalHistogramFilter.prototype.setTimeSeries = function (value) {\n        this._isTimeSeries = value;\n    };\n    /**\n     * Numerical Histograms do not support color mapping for now.\n     *\n     * @memberof NumericalHistogramFilter\n     */\n    NumericalHistogramFilter.prototype.enableColorMapping = function () {\n        throw new Error('Unsupported for numerical histograms');\n    };\n    /**\n     * Numerical Histograms do not support legend data for now.\n     *\n     * @memberof NumericalHistogramFilter\n     */\n    NumericalHistogramFilter.prototype.setLegendData = function () {\n        throw new Error('Unsupported for numerical histograms');\n    };\n    NumericalHistogramFilter.prototype.bindDataLayer = function () {\n        var _this = this;\n        this._dataLayer.on('updated', function () {\n            if (_this._totals && !_this._globalHistogram) {\n                _this._globalHistogram = _this._dataLayer.viz.variables[_this.name + \"_global\"];\n                if (_this._globalHistogram) {\n                    _this._bucketRanges = _this._globalHistogram.value.map(function (value) { return [value.x[0], value.x[1]]; });\n                    _this._emitter.emit('expressionReady', { name: _this.name, expression: _this.expression });\n                }\n                _this._widget.backgroundData = _utils_conversion_histogram__WEBPACK_IMPORTED_MODULE_1__[\"numerical\"](_this._globalHistogram);\n            }\n            var newHistogram = _this._dataLayer.viz.variables[_this.name];\n            if (!newHistogram) {\n                return;\n            }\n            if (newHistogram.value !== null &&\n                (_this._lastHistogram === null || !Object(_utils_comparison_histogram__WEBPACK_IMPORTED_MODULE_0__[\"isNumericalHistogramEqual\"])(_this._lastHistogram, newHistogram))) {\n                _this._emitter.emit('rangeChanged', [\n                    newHistogram.value[0].x[0],\n                    newHistogram.value[newHistogram.value.length - 1].x[1]\n                ]);\n                _this._lastHistogram = { value: newHistogram.value };\n                _this._widget.data = _utils_conversion_histogram__WEBPACK_IMPORTED_MODULE_1__[\"numerical\"](newHistogram);\n            }\n        });\n    };\n    NumericalHistogramFilter.prototype.selectionChanged = function (evt) {\n        if (evt.detail === null) {\n            this._selection = null;\n        }\n        else {\n            var selection = (this._isTimeSeries ? evt.detail : evt.detail.selection);\n            this._selection = [Number(selection[0]), Number(selection[1])];\n        }\n        this._emitter.emit('rangeChanged', this._selection);\n        this._filterChanged();\n    };\n    NumericalHistogramFilter.prototype._bucketArg = function () {\n        if (this._bucketRanges !== undefined) {\n            return this._bucketRanges;\n        }\n        return this._buckets;\n    };\n    return NumericalHistogramFilter;\n}(_BaseHistogramFilter__WEBPACK_IMPORTED_MODULE_2__[\"BaseHistogramFilter\"]));\n\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/histogram/NumericalHistogramFilter.ts?");

/***/ }),

/***/ "./src/vl/time-series/TimeSeries.ts":
/*!******************************************!*\
  !*** ./src/vl/time-series/TimeSeries.ts ***!
  \******************************************/
/*! exports provided: TimeSeries, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TimeSeries\", function() { return TimeSeries; });\n/**\n * This class is an orchestrator for Time Series widgets. It does not extend BaseFilter because for all intents\n * and purposes, we can use a numerical histogram. This class is only responsible of particular Time Series event\n * handling with regards to VL.\n *\n * The provided layer Viz object *must have* a variable called `@animation`\n *\n * @export\n * @class TimeSeries\n */\nvar TimeSeries = /** @class */ (function () {\n    /**\n     * Creates an instance of TimeSeries.\n     * @param {*} layer A CARTO VL layer\n     * @param {HTMLAsTimeSeriesWidgetElement} timeSeries An Airship TimeSeries HTML element\n     * @param {() => void} readyCb A callback to be called when we're done configuring internals\n     * @memberof TimeSeries\n     */\n    function TimeSeries(layer, timeSeries, readyCb) {\n        var _this = this;\n        this._timeSeries = timeSeries;\n        this._layer = layer;\n        if (layer.viz) {\n            this._onLayerLoaded();\n            readyCb();\n        }\n        else {\n            layer.on('loaded', function () {\n                _this._onLayerLoaded();\n                readyCb();\n            });\n        }\n    }\n    TimeSeries.prototype.removeHistogramLayer = function () {\n        this._dataLayer.remove();\n    };\n    /**\n     * Set the range of the animation input.\n     *\n     * This is called when the time series selection is changed.\n     *\n     * @param {[number, number]} range\n     * @returns\n     * @memberof TimeSeries\n     */\n    TimeSeries.prototype.setRange = function (range) {\n        if (!this._animation || !this._animation.input || !this._animation.input.min || !this._animation.input.max) {\n            return;\n        }\n        if (range === null) {\n            this._animation.input.min.blendTo(this._min, 0);\n            this._animation.input.max.blendTo(this._max, 0);\n        }\n        else {\n            this._animation.input.min.blendTo(range[0], 0);\n            this._animation.input.max.blendTo(range[1], 0);\n        }\n    };\n    /**\n     * This method sets up the events to handle animation updates and bind it to the TimeSeries widget:\n     *  - Update the progress\n     *  - Update the progress when user seeks\n     *  - Play / Pause events\n     *\n     * @private\n     * @memberof TimeSeries\n     */\n    TimeSeries.prototype._onLayerLoaded = function () {\n        var _this = this;\n        this._viz = this._layer.viz;\n        if (!this._viz.variables.animation) {\n            throw new Error('Variable @animation missing!');\n        }\n        this._animation = this._viz.variables.animation;\n        this._max = this._viz.variables.animation.input.max;\n        this._min = this._viz.variables.animation.input.min;\n        this._layer.on('updated', function () {\n            _this._timeSeries.progress = _this._animation.getProgressPct() * 100;\n            _this._timeSeries.playing = _this._animation.isPlaying();\n        });\n        this._timeSeries.animated = true;\n        this._timeSeries.addEventListener('seek', function (evt) {\n            _this._animation.setProgressPct(evt.detail / 100);\n            _this._timeSeries.progress = evt.detail;\n        });\n        this._timeSeries.addEventListener('play', function () {\n            _this._animation.play();\n        });\n        this._timeSeries.addEventListener('pause', function () {\n            _this._animation.pause();\n        });\n    };\n    return TimeSeries;\n}());\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (TimeSeries);\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/time-series/TimeSeries.ts?");

/***/ }),

/***/ "./src/vl/utils/color.ts":
/*!*******************************!*\
  !*** ./src/vl/utils/color.ts ***!
  \*******************************/
/*! exports provided: rgbToHex, toHex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgbToHex\", function() { return rgbToHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toHex\", function() { return toHex; });\n/**\n * Converts VL RGB Colors to hex\n *\n * @export\n * @param {RGBColor} color\n * @returns\n */\nfunction rgbToHex(color) {\n    return \"#\" + _toHex(color.r) + _toHex(color.g) + _toHex(color.b) + _toHex(color.a * 255);\n}\n/**\n * Converts colors to hex strings. If input is a string is assumed to be a valid HEX string.\n *\n * @export\n * @param {(RGBColor | string)} color\n * @returns\n */\nfunction toHex(color) {\n    if (typeof color === 'string') {\n        return color;\n    }\n    return rgbToHex(color);\n}\nfunction _toHex(value) {\n    if (isNaN(value) || value === undefined) {\n        return '';\n    }\n    return value.toString(16).padStart(2, '0').toUpperCase();\n}\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/utils/color.ts?");

/***/ }),

/***/ "./src/vl/utils/comparison/histogram/index.ts":
/*!****************************************************!*\
  !*** ./src/vl/utils/comparison/histogram/index.ts ***!
  \****************************************************/
/*! exports provided: isNumericalHistogramEqual, isCategoricalHistogramEqual, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNumericalHistogramEqual\", function() { return isNumericalHistogramEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isCategoricalHistogramEqual\", function() { return isCategoricalHistogramEqual; });\n/**\n * Compares two numerical histograms for equality\n *\n * @export\n * @param {VLNumericalHistogram} first\n * @param {VLNumericalHistogram} second\n * @returns\n */\nfunction isNumericalHistogramEqual(first, second) {\n    return isHistogramEqual(first.value, second.value, numericalCompare);\n}\n/**\n * Compares two categorical histograms for equality\n *\n * @export\n * @param {VLCategoricalHistogram} first\n * @param {VLCategoricalHistogram} second\n * @returns\n */\nfunction isCategoricalHistogramEqual(first, second) {\n    return isHistogramEqual(first.value, second.value, categoricalCompare);\n}\nfunction isHistogramEqual(first, second, compareFn) {\n    if (first.length !== second.length) {\n        return false;\n    }\n    for (var i = 0; i < first.length; i++) {\n        if (compareFn(first[i], second[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction numericalCompare(first, second) {\n    return first.x[0] !== second.x[0] ||\n        first.x[1] !== second.x[1] ||\n        first.y !== second.y;\n}\nfunction categoricalCompare(first, second) {\n    return first.x !== second.x || first.y !== second.y;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ isNumericalHistogramEqual: isNumericalHistogramEqual, isCategoricalHistogramEqual: isCategoricalHistogramEqual });\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/utils/comparison/histogram/index.ts?");

/***/ }),

/***/ "./src/vl/utils/conversion/category/index.ts":
/*!***************************************************!*\
  !*** ./src/vl/utils/conversion/category/index.ts ***!
  \***************************************************/
/*! exports provided: vlToCategory, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vlToCategory\", function() { return vlToCategory; });\n/* harmony import */ var _histogram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../histogram */ \"./src/vl/utils/conversion/histogram/index.ts\");\n\n/**\n * Converts a VL 'categorical' histogram to the format Airship's category widget requires\n *\n * @export\n * @param {VLCategoricalHistogram} data\n * @param {*} [colors]\n * @returns {object[]}\n */\nfunction vlToCategory(data, colors) {\n    return data.value.map(function (d) { return ({\n        color: Object(_histogram__WEBPACK_IMPORTED_MODULE_0__[\"findColorForCategory\"])(d.x, colors),\n        name: d.x,\n        value: d.y\n    }); });\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (vlToCategory);\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/utils/conversion/category/index.ts?");

/***/ }),

/***/ "./src/vl/utils/conversion/histogram/index.ts":
/*!****************************************************!*\
  !*** ./src/vl/utils/conversion/histogram/index.ts ***!
  \****************************************************/
/*! exports provided: numerical, categorical, findColorForCategory, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"numerical\", function() { return numerical; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"categorical\", function() { return categorical; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findColorForCategory\", function() { return findColorForCategory; });\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../color */ \"./src/vl/utils/color.ts\");\n\n/**\n * Converts a numerical VL Histogram data to Airship's Histogram format.\n *\n * Has no support for `color` for now.\n *\n * @export\n * @param {VLNumericalHistogram} data Histogram data in VL format\n * @returns {HistogramData[]}\n */\nfunction numerical(data) {\n    return data.value.map(function (d) { return ({\n        end: d.x[1],\n        start: d.x[0],\n        value: d.y,\n    }); });\n}\n/**\n * Converts a categorical VL Histogram to Airship's Histogram widget format.\n *\n * The second argument is used to provide custom colors for the widget.\n *\n * @export\n * @param {VLCategoricalHistogram} data Histogram data in VL format\n * @param {LegendEntry[]} [colors] VL Legend data, which maps values to colors.\n * @returns {HistogramData[]}\n */\nfunction categorical(data, colors) {\n    return data.value.map(function (d) { return ({\n        category: d.x,\n        color: findColorForCategory(d.x, colors),\n        end: undefined,\n        start: undefined,\n        value: d.y\n    }); });\n}\n/**\n * Looks for a color in an array of VL Legend Data and converts it into a hex string.\n *\n * @export\n * @param {string} category\n * @param {LegendEntry[]} colors\n * @returns {(string | undefined)}\n */\nfunction findColorForCategory(category, colors) {\n    if (!colors) {\n        return undefined;\n    }\n    var color = colors.find(function (element) { return element.key === category; });\n    if (color) {\n        return Object(_color__WEBPACK_IMPORTED_MODULE_0__[\"toHex\"])(color.value);\n    }\n    return undefined;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ numerical: numerical, categorical: categorical });\n\n\n//# sourceURL=webpack://AsBridge/./src/vl/utils/conversion/histogram/index.ts?");

/***/ })

/******/ });
});